<?php

declare(strict_types=1);

/**
 * This file is part of the RaiffeisenBank Statement Tools package
 *
 * https://github.com/Spoje-NET/pohoda-raiffeisenbank
 *
 * (c) Spoje.Net IT s.r.o. <https://spojenet.cz>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace SpojeNet\RaiffeisenBank;

use Ease\Shared;
use VitexSoftware\Raiffeisenbank\ApiClient;
use VitexSoftware\Raiffeisenbank\Statementor;

require_once '../vendor/autoload.php';

\define('APP_NAME', 'RaiffeisenBank Statement Mailer');

if (\array_key_exists(1, $argv) && $argv[1] === '-h') {
    echo 'raiffeisenbank-statement-mailer [email recipient,recipient2,...] [format pdf/xml] [path/to/.env]';
    echo "\n";

    exit;
}

Shared::init(['CERT_FILE', 'CERT_PASS', 'XIBMCLIENTID', 'ACCOUNT_NUMBER'], \array_key_exists(3, $argv) ? $argv[3] : '../.env');
$engine = new Statementor(Shared::cfg('ACCOUNT_NUMBER'));
$engine->setScope(Shared::cfg('STATEMENT_SCOPE', 'yesterday'));

if (Shared::cfg('APP_DEBUG', false)) {
    $engine->logBanner();
}

if (ApiClient::checkCertificatePresence(Shared::cfg('CERT_FILE'), true) === false) {
    $engine->addStatusMessage(sprintf(_('Certificate file %s problem'), Shared::cfg('CERT_FILE')), 'error');

    exit(1);
}

try {
    $status = 'ok';
    $exitcode = 0;
    $statements = $engine->getStatements(Shared::cfg('ACCOUNT_CURRENCY', 'CZK'), Shared::cfg('STATEMENT_LINE', 'MAIN'));
} catch (\VitexSoftware\Raiffeisenbank\ApiException $exc) {
    $status = $exc->getCode().': error';
    $exitcode = (int) $exc->getCode();
}

if (empty($statements) === false) {
    $downloaded = $engine->download(
        Shared::cfg('STATEMENTS_DIR', sys_get_temp_dir()),
        $statements,
        \array_key_exists(2, $argv) ? $argv[2] : Shared::cfg('STATEMENT_FORMAT', 'pdf'),
    );

    if ($downloaded) {
        $recipient = \array_key_exists(1, $argv) ? $argv[1] : Shared::cfg('STATEMENTS_TO');

        if (empty($recipient)) {
            fwrite(fopen('php://stderr', 'wb'), Shared::appName().': '._('No recipient provided! Check arguments or environment').\PHP_EOL);

            exit(1);
        }

        try {
            $mailer = new \Ease\Mailer($recipient, sprintf(_('Bank Statements %s'), Shared::cfg('ACCOUNT_NUMBER')));
            $headers = [];

            if (Shared::cfg('STATEMENTS_FROM')) {
                $headers['From'] = Shared::cfg('STATEMENTS_FROM');
            } else {
                $mailer->addStatusMessage('ðŸ’Œ  The From header not set', 'warning');
            }

            if (Shared::cfg('STATEMENTS_REPLYTO')) {
                $headers['Reply-To'] = Shared::cfg('STATEMENTS_REPLYTO');
            }

            if (Shared::cfg('STATEMENTS_CC')) {
                $headers['Cc'] = Shared::cfg('STATEMENTS_CC');
            }

            $mailer->setMailHeaders($headers);
            $mailer->addText(sprintf(_('Statements from %s to %s'), $engine->getSince()->format(Statementor::$dateFormat), $engine->getUntil()->format(Statementor::$dateFormat))."\n\n");

            foreach ($statements as $stId => $statement) {
                $mailer->addText(_('Statement').' '.(string) ($stId + 1)."\n");
                $mailer->addText("----------------------------\n");

                foreach ($statement as $statementKey => $statementValue) {
                    $mailer->addText($statementKey.': '.(\is_array($statementValue) ? implode(',', $statementValue) : (string) $statementValue)."\n");
                }

                $mailer->addText("\n");
            }

            $mailer->addText("\n".sprintf(_('Generated by %s %s.'), Shared::appName(), Shared::AppVersion())."\nhttps://github.com/Spoje-NET/raiffeisenbank-statement-tools");

            foreach ($downloaded as $statement) {
                $mailer->addFile($statement, mime_content_type($statement));

                if (file_exists($statement)) {
                    unlink($statement);
                }
            }

            $mailer->send();

            $report = [
                'status' => 'success',
                'timestamp' => date('c'),
                'message' => _('Statements mailed successfully'),
                'artifacts' => [
                    'statements' => \is_array($downloaded) ? array_values($downloaded) : [],
                ],
                'metrics' => [
                    'count' => \is_array($downloaded) ? \count($downloaded) : 0,
                ],
            ];
            $reportFile = Shared::cfg('REPORT_FILE', 'statement_mail_report.json');
            $written = file_put_contents($reportFile, json_encode($report, Shared::cfg('DEBUG') ? \JSON_PRETTY_PRINT : 0));
            $engine->addStatusMessage(sprintf(_('Saving result to %s'), $reportFile), $written ? 'success' : 'error');
        } catch (\Exception $exc) {
            $report = [
                'status' => 'error',
                'timestamp' => date('c'),
                'message' => $exc->getMessage(),
                'metrics' => [
                    'error_code' => $exc->getCode(),
                ],
            ];
            $reportFile = Shared::cfg('REPORT_FILE', 'statement_mail_report.json');
            $written = file_put_contents($reportFile, json_encode($report, Shared::cfg('DEBUG') ? \JSON_PRETTY_PRINT : 0));
            $engine->addStatusMessage(sprintf(_('Saving result to %s'), $reportFile), $written ? 'success' : 'error');
            $exitcode = $exc->getCode() ?: 3;
        }
    } else {
        $report = [
            'status' => 'error',
            'timestamp' => date('c'),
            'message' => _('No statements returned'),
            'metrics' => [
                'count' => 0,
            ],
        ];
        $reportFile = Shared::cfg('REPORT_FILE', 'statement_mail_report.json');
        $written = file_put_contents($reportFile, json_encode($report, Shared::cfg('DEBUG') ? \JSON_PRETTY_PRINT : 0));
        $engine->addStatusMessage(sprintf(_('Saving result to %s'), $reportFile), $written ? 'success' : 'error');
    }
} else {
    $report = [
        'status' => 'error',
        'timestamp' => date('c'),
        'message' => _('No statements available'),
        'metrics' => [
            'count' => 0,
        ],
    ];
    $reportFile = Shared::cfg('REPORT_FILE', 'statement_mail_report.json');
    $written = file_put_contents($reportFile, json_encode($report, Shared::cfg('DEBUG') ? \JSON_PRETTY_PRINT : 0));
    $engine->addStatusMessage(sprintf(_('Saving result to %s'), $reportFile), $written ? 'success' : 'error');
}

exit($exitcode);
